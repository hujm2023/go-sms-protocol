package cmpp20

import (
	sms "github.com/hujm2023/go-sms-protocol"
	"github.com/hujm2023/go-sms-protocol/cmpp"
	"github.com/hujm2023/go-sms-protocol/packet"
)

// PduConnect represents a CMPP Connect PDU.
// It is used by the SP to request connection to the ISMG.
type PduConnect struct {
	cmpp.Header

	// SourceAddr is the source address (6 bytes, CMPP2 account).
	SourceAddr string

	// AuthenticatorSource is the authenticator source (16 bytes, MD5(SourceAddr + 9 bytes of 0 + password + Timestamp)).
	AuthenticatorSource string

	// Version is the version number (1 byte). High 4 bits for major, low 4 bits for minor. Fixed to 0x20 for CMPP 2.0.
	Version uint8

	// Timestamp is the timestamp generated by the client (4 bytes, MMDDHHMMSS format).
	Timestamp uint32
}

// IEncode encodes the PduConnect PDU into a byte slice.
func (p *PduConnect) IEncode() ([]byte, error) {
	buf := packet.NewPacketWriter(0)
	defer buf.Release()

	cmpp.WriteHeaderNoLength(p.Header, buf)
	buf.WriteFixedLenString(p.SourceAddr, 6)
	buf.WriteFixedLenString(p.AuthenticatorSource, 16)
	buf.WriteUint8(p.Version)
	buf.WriteUint32(p.Timestamp)

	return buf.BytesWithLength()
}

// IDecode decodes the byte slice into a PduConnect PDU.
func (p *PduConnect) IDecode(data []byte) error {
	if len(data) < cmpp.MinCMPPPduLength {
		return ErrInvalidPudLength
	}

	buf := packet.NewPacketReader(data)
	defer buf.Release()

	p.Header = cmpp.ReadHeader(buf)
	p.SourceAddr = buf.ReadCStringN(6)
	p.AuthenticatorSource = buf.ReadCStringN(16)
	p.Version = buf.ReadUint8()
	p.Timestamp = buf.ReadUint32()

	return buf.Error()
}

// GetSequenceID returns the sequence ID of the PDU.
func (p *PduConnect) GetSequenceID() uint32 {
	return p.Header.SequenceID
}

// SetSequenceID sets the sequence ID of the PDU.
func (p *PduConnect) SetSequenceID(sid uint32) {
	p.Header.SequenceID = sid
}

// GetCommand returns the command ID of the PDU.
func (p *PduConnect) GetCommand() sms.ICommander {
	return cmpp.CommandConnect
}

// GenEmptyResponse generates an empty response PDU for the PduConnect.
func (p *PduConnect) GenEmptyResponse() sms.PDU {
	return &PduConnectResp{
		Header: cmpp.Header{
			CommandID:  cmpp.CommandConnectResp,
			SequenceID: p.GetSequenceID(),
		},
	}
}

// String returns a string representation of the PduConnect PDU.
func (p *PduConnect) String() string {
	w := packet.NewPDUStringer()
	defer w.Release()

	w.Write("Header", p.Header)
	w.Write("SourceAddr", p.SourceAddr)
	w.WriteWithBytes("AuthenticatorSource", p.AuthenticatorSource)
	w.Write("Version", p.Version)
	w.Write("Timestamp", p.Timestamp)

	return w.String()
}

// --------------------------------------------------------------------

// PduConnectResp represents a CMPP ConnectResp PDU.
// It is the response to a PduConnect request.
type PduConnectResp struct {
	cmpp.Header

	// Status indicates the connection status (1 byte): 0=success, 1=invalid structure, 2=invalid source address, 3=auth error, 4=version too high, >5=other error.
	Status ConnectRespStatus

	// AuthenticatorISMG is the ISMG authenticator code (16 bytes, MD5(Status + req.AuthenticatorSource + password)).
	AuthenticatorISMG string

	// Version is the highest version number supported by the server (1 byte).
	Version uint8
}

// IEncode encodes the PduConnectResp PDU into a byte slice.
func (pr *PduConnectResp) IEncode() ([]byte, error) {
	buf := packet.NewPacketWriter(0)
	defer buf.Release()

	cmpp.WriteHeaderNoLength(pr.Header, buf)
	buf.WriteUint8(uint8(pr.Status))
	buf.WriteFixedLenString(pr.AuthenticatorISMG, 16)
	buf.WriteUint8(pr.Version)

	return buf.BytesWithLength()
}

// IDecode decodes the byte slice into a PduConnectResp PDU.
func (pr *PduConnectResp) IDecode(data []byte) error {
	if len(data) < cmpp.MinCMPPPduLength {
		return ErrInvalidPudLength
	}

	buf := packet.NewPacketReader(data)
	pr.Header = cmpp.ReadHeader(buf)
	pr.Status = ConnectRespStatus(buf.ReadUint8())
	pr.AuthenticatorISMG = buf.ReadCStringN(16)
	pr.Version = buf.ReadUint8()

	return buf.Error()
}

// GetSequenceID returns the sequence ID of the PDU.
func (pr *PduConnectResp) GetSequenceID() uint32 {
	return pr.Header.SequenceID
}

// SetSequenceID sets the sequence ID of the PDU.
func (pr *PduConnectResp) SetSequenceID(sid uint32) {
	pr.Header.SequenceID = sid
}

// GetCommand returns the command ID of the PDU.
func (p *PduConnectResp) GetCommand() sms.ICommander {
	return cmpp.CommandConnectResp
}

// GenEmptyResponse generates an empty response PDU (nil for ConnectResp).
func (p *PduConnectResp) GenEmptyResponse() sms.PDU {
	return nil
}

// String returns a string representation of the PduConnectResp PDU.
func (p *PduConnectResp) String() string {
	w := packet.NewPDUStringer()
	defer w.Release()

	w.Write("Header", p.Header)
	w.Write("Status", p.Status)
	w.WriteWithBytes("AuthenticatorISMG", p.AuthenticatorISMG)
	w.Write("Version", p.Version)

	return w.String()
}

// --- connect resp status ----

type ConnectRespStatus uint8

// Status indicates the connection status (1 byte): 0=success, 1=invalid structure, 2=invalid source address, 3=auth error, 4=version too high, >5=other error.
const (
	// 0 success
	ConnectRespStatusSuccess ConnectRespStatus = iota
	// 1 invalid structure
	ConnectRespStatusInvalidStructure
	// 2 invalid source address, that is, this account does not exist
	ConnectRespStatusInvalidSourceAddress
	// 3 auth error, that is, the password is incorrect
	ConnectRespStatusAuthError
	// 4 version too high
	ConnectRespStatusVersionTooHigh
	// 5 too many connections
	ConnectRespStatusTooConns
	// 6 use ip address not in white list
	ConnectRespStatusIpBlock
	// 7 system error
	ConnectRespStatusSystemError
)

func (s ConnectRespStatus) String() string {
	switch s {
	case ConnectRespStatusSuccess:
		return "0:Success"
	case ConnectRespStatusInvalidStructure:
		return "1:InvalidStructure"
	case ConnectRespStatusInvalidSourceAddress:
		return "2:InvalidSourceAddress"
	case ConnectRespStatusAuthError:
		return "3:AuthError"
	case ConnectRespStatusVersionTooHigh:
		return "4:VersionTooHigh"
	case ConnectRespStatusTooConns:
		return "5:TooManyConnections"
	case ConnectRespStatusIpBlock:
		return "6:IPBlocked"
	case ConnectRespStatusSystemError:
		return "7:SystemError"
	default:
		return "8:UnknownStatus"
	}
}
