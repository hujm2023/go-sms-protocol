package cmpp

import "github.com/hujm2023/go-sms-protocol/packet"

// SubPduDeliveryContent represents the content structure of a CMPP Deliver PDU when it's a status report.
type SubPduDeliveryContent struct {
	// MsgID is the message identifier generated by the ISMG when the SP submitted the message (CMPP_SUBMIT).
	// 8 bytes.
	MsgID uint64

	// Stat is the status of the sent message (7 bytes).
	// Values are similar to SMPP stat field definitions:
	// DELIVRD: Message is delivered to destination
	// EXPIRED: Message validity period has expired
	// DELETED: Message has been deleted.
	// ACCEPTD: Message is in accepted state (i.e., manually read by customer service)
	// UNKNOWN: Message is in invalid state
	// REJECTD: Message is in a rejected state
	Stat string

	// SubmitTime is the time the message was submitted to the downstream gateway (10 bytes, YYMMDDHHMM format).
	SubmitTime string

	// DoneTime is the time the status report was received from the downstream gateway (10 bytes, YYMMDDHHMM format).
	DoneTime string

	// DestTerminalID is the destination terminal MSISDN (21 bytes).
	// This is the target terminal from the SP's CMPP_SUBMIT message.
	DestTerminalID string

	// SMSCSequence is the sequence number from the SMSC's status report message body (4 bytes).
	SMSCSequence uint32
}

// IEncode encodes the SubPduDeliveryContent into a byte slice.
func (s *SubPduDeliveryContent) IEncode() ([]byte, error) {
	b := packet.NewPacketWriter(8 + 7 + 10 + 10 + 21 + 4)
	defer b.Release()

	b.WriteUint64(s.MsgID)
	b.WriteFixedLenString(s.Stat, 7)
	b.WriteFixedLenString(s.SubmitTime, 10)
	b.WriteFixedLenString(s.DoneTime, 10)
	b.WriteFixedLenString(s.DestTerminalID, 21)
	b.WriteUint32(s.SMSCSequence)

	return b.Bytes()
}

// IDecode decodes the byte slice into a SubPduDeliveryContent.
func (s *SubPduDeliveryContent) IDecode(data []byte) (err error) {
	r := packet.NewPacketReader(data)
	defer r.Release()

	s.MsgID = r.ReadUint64()
	s.Stat = r.ReadCStringN(7)
	s.SubmitTime = r.ReadCStringN(10)
	s.DoneTime = r.ReadCStringN(10)
	s.DestTerminalID = r.ReadCStringN(21)
	s.SMSCSequence = r.ReadUint32()

	return r.Error()
}
