package cmpp30

import (
	sms "github.com/hujm2023/go-sms-protocol"
	"github.com/hujm2023/go-sms-protocol/cmpp"
	"github.com/hujm2023/go-sms-protocol/packet"
)

// Connect represents a CMPP 3.0 Connect PDU.
// It is used by the SP to request connection to the ISMG.
type Connect struct {
	cmpp.Header
	// SourceAddr is the SP ID (6 bytes).
	SourceAddr string

	// AuthenticatorSource is the authentication string (16 bytes), calculated as md5(SourceAddr + 9 bytes of zeros + password + Timestamp).
	AuthenticatorSource string

	// Version is the protocol version (1 byte). Higher 4 bits for major version, lower 4 bits for minor version. For versions below 3.0, it's fixed to 0x30.
	Version uint8

	// Timestamp is the timestamp generated by the client (4 bytes), format MMDDHHMMSS.
	Timestamp uint32
}

// IDecode decodes the byte slice into a Connect PDU.
func (p *Connect) IDecode(data []byte) error {
	if len(data) < cmpp.MinCMPPPduLength {
		return cmpp.ErrInvalidPudLength
	}

	buf := packet.NewPacketReader(data)
	defer buf.Release()

	p.Header = cmpp.ReadHeader(buf)
	p.SourceAddr = buf.ReadCStringN(6)
	p.AuthenticatorSource = buf.ReadCStringN(16)
	p.Version = buf.ReadUint8()
	p.Timestamp = buf.ReadUint32()

	return buf.Error()
}

// IEncode encodes the Connect PDU into a byte slice.
func (p *Connect) IEncode() ([]byte, error) {
	buf := packet.NewPacketWriter()
	defer buf.Release()

	cmpp.WriteHeaderNoLength(p.Header, buf)
	buf.WriteFixedLenString(p.SourceAddr, 6)
	buf.WriteFixedLenString(p.AuthenticatorSource, 16)
	buf.WriteUint8(p.Version)
	buf.WriteUint32(p.Timestamp)

	return buf.BytesWithLength()
}

// SetSequenceID sets the sequence ID of the PDU.
func (p *Connect) SetSequenceID(id uint32) {
	p.Header.SequenceID = id
}

// GetSequenceID returns the sequence ID of the PDU.
func (c *Connect) GetSequenceID() uint32 {
	return c.Header.SequenceID
}

// GetCommand returns the command ID of the PDU.
func (c *Connect) GetCommand() sms.ICommander {
	return cmpp.CommandConnect
}

// GenEmptyResponse generates an empty response PDU for the Connect.
func (c *Connect) GenEmptyResponse() sms.PDU {
	return &ConnectResp{
		Header: cmpp.Header{
			CommandID:  cmpp.CommandConnectResp,
			SequenceID: c.GetSequenceID(),
		},
	}
}

// String returns a string representation of the Connect PDU.
func (c *Connect) String() string {
	w := packet.NewPDUStringer()
	defer w.Release()

	w.Write("Header", c.Header)
	w.Write("SourceAddr", c.SourceAddr)
	w.WriteWithBytes("AuthenticatorSource", c.AuthenticatorSource)
	w.Write("Version", c.Version)

	return w.String()
}

// ConnectResp represents a CMPP 3.0 ConnectResp PDU.
// It is the response to a Connect PDU.
type ConnectResp struct {
	cmpp.Header

	// Status indicates the connection result (4 bytes):
	// 0: Success
	// 1: Invalid message structure
	// 2: Invalid source address
	// 3: Authentication failed
	// 4: Version too high
	// >5: Other errors
	Status uint32

	// AuthenticatorISMG is the ISMG authentication code (16 bytes), used to authenticate the ISMG. Calculated as md5(Status + req.AuthenticatorSource + password).
	AuthenticatorISMG string

	// Version is the highest protocol version supported by the server (1 byte).
	Version uint8
}

// IDecode decodes the byte slice into a ConnectResp PDU.
func (c *ConnectResp) IDecode(data []byte) error {
	if len(data) < cmpp.MinCMPPPduLength {
		return cmpp.ErrInvalidPudLength
	}
	buf := packet.NewPacketReader(data)
	defer buf.Release()

	c.Header = cmpp.ReadHeader(buf)
	c.Status = buf.ReadUint32()
	c.AuthenticatorISMG = buf.ReadCStringN(16)
	c.Version = buf.ReadUint8()
	return buf.Error()
}

// IEncode encodes the ConnectResp PDU into a byte slice.
func (c *ConnectResp) IEncode() ([]byte, error) {
	buf := packet.NewPacketWriter()
	defer buf.Release()

	cmpp.WriteHeaderNoLength(c.Header, buf)
	buf.WriteUint32(c.Status)
	buf.WriteFixedLenString(c.AuthenticatorISMG, 16)
	buf.WriteUint8(c.Version)

	return buf.BytesWithLength()
}

// SetSequenceID sets the sequence ID of the PDU.
func (c *ConnectResp) SetSequenceID(id uint32) {
	c.Header.SequenceID = id
}

// GetSequenceID returns the sequence ID of the PDU.
func (c *ConnectResp) GetSequenceID() uint32 {
	return c.Header.SequenceID
}

// GetCommand returns the command ID of the PDU.
func (c *ConnectResp) GetCommand() sms.ICommander {
	return cmpp.CommandConnectResp
}

// GenEmptyResponse generates an empty response PDU (nil for ConnectResp).
func (c *ConnectResp) GenEmptyResponse() sms.PDU {
	return nil
}

// String returns a string representation of the ConnectResp PDU.
func (c *ConnectResp) String() string {
	w := packet.NewPDUStringer()
	defer w.Release()

	w.Write("Header", c.Header)
	w.Write("Status", c.Status)
	w.WriteWithBytes("AuthenticatorISMG", c.AuthenticatorISMG)
	w.Write("Version", c.Version)

	return w.String()
}
