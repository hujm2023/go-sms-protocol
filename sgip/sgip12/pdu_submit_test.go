package sgip12

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/hujm2023/go-sms-protocol/sgip"
)

func TestSubmit(t *testing.T) {
	raw := []byte{
		0x0, 0x0, 0x0, 0xc1, 0x0, 0x0, 0x0, 0x3,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x31, 0x30, 0x36, 0x39,
		0x30, 0x30, 0x39, 0x30, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x31, 0x37, 0x36, 0x30, 0x30, 0x35, 0x33,
		0x37, 0x33, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x31,
		0x37, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x31, 0x37, 0x36, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x31, 0x32, 0x33, 0x34, 0x35, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x79, 0x79, 0x6d, 0x6d, 0x64, 0x64, 0x68, 0x68,
		0x6d, 0x6d, 0x73, 0x73, 0x74, 0x6e, 0x6e, 0x70,
		0x79, 0x79, 0x6d, 0x6d, 0x64, 0x64, 0x68, 0x68,
		0x6d, 0x6d, 0x73, 0x73, 0x74, 0x6e, 0x6e, 0x70,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x8, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x73,
		0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0,
	}
	// 实现接口级别的单测
	a := new(Submit)
	assert.Nil(t, a.IDecode(raw))
	t.Log(a.CommandID.String())
	t.Log(a.GetSequenceID())
	submit := Submit{
		Header: sgip.Header{
			TotalLength: 193,
			CommandID:   sgip.SGIP_SUBMIT,
			Sequence:    [3]uint32{},
		},
		SpNumber:         "10690090",
		ChargeNumber:     "17600537300",
		UserCount:        2,
		UserNumber:       []string{"17600000000", "17611111111"},
		CorpID:           "12345",
		ServiceType:      "",
		FeeType:          0,
		FeeValue:         "",
		GivenValue:       "",
		AgentFlag:        0,
		MorelatetoMTFlag: 0,
		Priority:         0,
		ExpireTime:       "yymmddhhmmsstnnp",
		ScheduleTime:     "yymmddhhmmsstnnp",
		ReportFlag:       0,
		TpPid:            0,
		TpUdhi:           0,
		MessageCoding:    0,
		MessageType:      0,
		MessageLength:    8,
		MessageContent:   []byte("test msg"),
		Reserved:         "",
	}

	value, err := submit.IEncode()
	assert.Nil(t, err)
	assert.True(t, bytes.EqualFold(raw, value))
	assert.Equal(t, sgip.SGIP_SUBMIT, submit.GetCommand())

	pdu, err := DecodeSGIP12(value)
	assert.Nil(t, err)
	_, ok := pdu.(*Submit)
	assert.True(t, ok)

	submitResp := submit.GenEmptyResponse()
	assert.Equal(t, sgip.SGIP_SUBMIT_REP, submitResp.GetCommand())
	assert.Nil(t, submitResp.GenEmptyResponse())
}

func TestSubmitResp(t *testing.T) {
	raw := []byte{
		0x0, 0x0, 0x0, 0x1d,
		0x80, 0x0, 0x0, 0x3,
		0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0,
		0x0,
	}

	// 实现接口级别的单测
	a := new(SubmitResp)
	assert.Nil(t, a.IDecode(raw))

	encoded, err := a.IEncode()
	assert.Nil(t, err)
	assert.True(t, bytes.EqualFold(raw, encoded))
	response := &SubmitResp{
		Header: sgip.Header{
			CommandID: sgip.SGIP_SUBMIT_REP,
			Sequence:  [3]uint32{0, 0, 0},
		},
		Result:   sgip.STAT_OK,
		Reserved: "",
	}

	value, err := response.IEncode()
	assert.Nil(t, err)
	assert.True(t, bytes.EqualFold(raw, value))

	pdu, err := DecodeSGIP12(value)
	assert.Nil(t, err)
	_, ok := pdu.(*SubmitResp)
	assert.True(t, ok)
}

func TestSubmit_1(t *testing.T) {
	raw := []byte{
		0, 0, 0, 192, 0, 0, 0, 3, 0, 0, 0, 0, 31, 1,
		241, 15, 0, 0, 0, 98, 49, 48, 54, 57, 48, 50,
		54, 57, 51, 49, 50, 48, 51, 0, 0, 0, 0, 0, 0,
		0, 0, 57, 51, 49, 50, 48, 51, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 49, 56, 48, 50, 54,
		57, 48, 49, 48, 50, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 50, 51, 52, 53, 57, 51, 49, 50, 48, 51, 0, 0, 0, 0, 1, 48, 48, 48, 0, 0, 0, 48, 48, 48, 48, 48, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 0, 28, 0, 116, 0, 101, 0, 115, 0, 116, 0, 115, 0, 109, 0, 115, 0, 115, 0, 103, 0, 105, 0, 112, 0, 49, 0, 50, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	}

	// 实现接口级别的单测
	a := new(Submit)
	assert.Nil(t, a.IDecode(raw))
	t.Log(string(a.MessageContent))
}
