package sgip12

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/hujm2023/go-sms-protocol/sgip"
)

func TestDeliver(t *testing.T) {
	raw := []byte{
		0x0, 0x0, 0x0, 0x63, 0x0, 0x0, 0x0, 0x4,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x31, 0x37, 0x36, 0x30,
		0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x31, 0x30, 0x36, 0x39, 0x39, 0x39, 0x39,
		0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x16, 0x68, 0x65, 0x6c,
		0x6c, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x69, 0x76,
		0x65, 0x72, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20,
		0x6d, 0x73, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0,
	}
	// 实现接口级别的单测
	a := new(Deliver)
	assert.Nil(t, a.IDecode(raw))

	deliver := &Deliver{
		Header: sgip.Header{
			CommandID: sgip.SGIP_DELIVER,
			Sequence:  [3]uint32{0, 0, 0},
		},
		UserNumber:     "17600111111",
		SPNumber:       "1069999999999",
		TpPid:          0,
		TpUdhi:         0,
		MessageCoding:  0,
		MessageLength:  22,
		MessageContent: []byte("hello deliver test msg"),
		Reserved:       "",
	}

	value, err := deliver.IEncode()
	assert.Nil(t, err)
	assert.True(t, bytes.EqualFold(raw, value))
	assert.Equal(t, sgip.SGIP_DELIVER, deliver.GetCommand())

	deliverResp := deliver.GenEmptyResponse()
	assert.Nil(t, deliverResp.GenEmptyResponse())
	assert.Equal(t, sgip.SGIP_DELIVER_REP, deliverResp.GetCommand())
}

func TestDeliverResp(t *testing.T) {
	raw := []byte{
		0x0, 0x0, 0x0, 0x1d,
		0x80, 0x0, 0x0, 0x4,
		0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0,
		0x0,
	}

	// 实现接口级别的单测
	a := new(DeliverResp)
	assert.Nil(t, a.IDecode(raw))

	encoded, err := a.IEncode()
	assert.Nil(t, err)
	assert.True(t, bytes.EqualFold(raw, encoded))
	response := &DeliverResp{
		Header: sgip.Header{
			CommandID: sgip.SGIP_DELIVER_REP,
			Sequence:  [3]uint32{0, 0, 0},
		},
		Result:   sgip.STAT_OK,
		Reserved: "",
	}

	value, err := response.IEncode()
	assert.Nil(t, err)
	assert.True(t, bytes.EqualFold(raw, value))
}
